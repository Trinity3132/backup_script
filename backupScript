#!/bin/bash

# Author: trinity3
# Date: October 5, 2025
# Description: Automated Arch + DWM setup using personal backup repo with modular case options

set -o errexit
set -o nounset
set -o pipefail
shopt -s nullglob

# ──────────────────────────────────────────────
# 🎨 COLORS
# ──────────────────────────────────────────────
BLUE=$'\033[1;34m'
GREEN=$'\033[1;32m'
YELLOW=$'\033[1;33m'
RED=$'\033[1;31m'
NC=$'\033[0m'

# ──────────────────────────────────────────────
# 📦 PACKAGE ARRAYS
# ──────────────────────────────────────────────
PACMAN_PKGS=(
  alacritty alsa-utils amd-ucode arandr atool base base-devel bat btop btrfs-progs
  chromium clamav clang dunst eza fastfetch fd feh ffmpegthumbnailer firefox-developer-edition
  flatpak fzf git github-cli go grub gst-plugin-pipewire jmtpfs jq lazygit lf
  lib32-mesa lib32-vulkan-radeon libnotify libpulse libreoffice-fresh libva-utils linux-firmware
  linux-zen lynx man-db mediainfo mesa-utils mpc mpd mpv nano neovim networkmanager nodejs
  noto-fonts noto-fonts-emoji npm nsxiv numlockx openssh pavucontrol perl-file-mimeinfo pipewire
  pipewire-alsa pipewire-jack pipewire-pulse playerctl plocate ripgrep rmpc
)

AUR_PKGS=(
  jmtpfs mullvad-browser-bin nerd-fonts-sf-mono papirus-icon-theme-git paru paru-debug
  postman-bin simple-mtpfs spotify yay yay-debug
)

# ──────────────────────────────────────────────
# ⚙️ FUNCTIONS
# ──────────────────────────────────────────────

enable_sudo_wheel() {
  echo -e "\n${BLUE}󰐣 Enabling wheel group in sudoers...${NC}"
  sudo EDITOR="sed -i 's/^# %wheel ALL=(ALL:ALL) ALL/%wheel ALL=(ALL:ALL) ALL/'" visudo \
    && echo -e "${GREEN}✅ Wheel group enabled.${NC}" \
    || echo -e "${YELLOW}⚠️ Skipped sudoers modification.${NC}"
}

install_security() {
  echo -e "\n${BLUE}🔐 Installing AppArmor, Firewalld, and git...${NC}"
  sudo pacman -S --needed --noconfirm apparmor firewalld git
  sudo systemctl enable --now apparmor.service
  sudo systemctl enable --now firewalld.service

  echo -e "\n${BLUE}🌐 Configuring Firewalld...${NC}"
  sudo firewall-cmd --set-default-zone=public
  sudo firewall-cmd --permanent --zone=public --add-service=dhcpv6-client
  sudo firewall-cmd --permanent --zone=public --add-service=ssh
  sudo firewall-cmd --reload
  echo -e "${GREEN}✅ AppArmor and Firewalld installed & configured.${NC}"
}

update_grub() {
  echo -e "\n${BLUE}󰌽 Updating GRUB with AppArmor & LSM stacking...${NC}"
  if grep -q '^GRUB_CMDLINE_LINUX_DEFAULT=' /etc/default/grub; then
    sudo sed -i 's|^GRUB_CMDLINE_LINUX_DEFAULT=.*|GRUB_CMDLINE_LINUX_DEFAULT="loglevel=3 quiet lsm=landlock,lockdown,yama,integrity,apparmor,bpf"|' /etc/default/grub
  else
    echo 'GRUB_CMDLINE_LINUX_DEFAULT="loglevel=3 quiet lsm=landlock,lockdown,yama,integrity,apparmor,bpf"' | sudo tee -a /etc/default/grub
  fi
  sudo grub-mkconfig -o /boot/grub/grub.cfg && echo -e "${GREEN}✅ GRUB updated.${NC}"
}

install_yay() {
  echo -e "\n${BLUE} Installing yay...${NC}"
  sudo pacman -S --needed --noconfirm git base-devel gh vim neovim
  if [[ ! -d /tmp/yay ]]; then
    git clone https://aur.archlinux.org/yay.git /tmp/yay
  fi
  cd /tmp/yay && makepkg -si --noconfirm
  echo -e "${GREEN}✅ yay installed.${NC}"
}

clone_repo() {
  REPO_URL="https://github.com/Trinity3132/backUp_repo.git"
  CLONE_DIR="$HOME/backup"
  echo -e "\n${BLUE} Cloning backup repo...${NC}"
  if [[ ! -d "$CLONE_DIR" ]]; then
    git clone "$REPO_URL" "$CLONE_DIR"
  else
    cd "$CLONE_DIR" && git pull
  fi
  echo -e "${GREEN}✅ Repo ready at $CLONE_DIR${NC}"
}

install_configs() {
  echo -e "\n${BLUE} Installing configs and dotfiles...${NC}"
  mkdir -p "$HOME/.local/bin"
  cp -r "$HOME/backup/.local/bin/scripts" "$HOME/.local/bin/"
  cp -r "$HOME/backup/.config" "$HOME/"
  cp -r "$HOME/backup/.screenlayout" "$HOME/"

  for file in .bash_profile .bashrc .zprofile .zshrc .xinitrc; do
    [[ -f "$HOME/backup/$file" ]] && cp "$HOME/backup/$file" "$HOME/"
  done
  echo -e "${GREEN}✅ Configs installed.${NC}"
}

build_dwm_suite() {
  echo -e "\n${BLUE}🧩 Building dwm, st, dwmblocks...${NC}"
  cd "$HOME/backup/.config/dwm" && sudo make clean install
  cd "$HOME/backup/.config/st" && sudo make clean install
  cd "$HOME/backup/.config/dwmblocks" && sudo make clean install
}

install_pacman_pkgs() {
  echo -e "\n${BLUE}📦 Installing Pacman packages...${NC}"
  sudo pacman -S --needed --noconfirm "${PACMAN_PKGS[@]}"
  echo -e "${GREEN}✅ Pacman packages installed.${NC}"
}

install_aur_pkgs() {
  echo -e "\n${BLUE}📦 Installing AUR packages...${NC}"
  yay -S --needed --noconfirm "${AUR_PKGS[@]}"
  echo -e "${GREEN}✅ AUR packages installed.${NC}"
}

install_grub_theme() {
  echo -e "\n${BLUE}🎨 Installing GRUB bootloader themes...${NC}"
  cd "$HOME/backup/.config/voidrice/Top-5-Bootloader-Themes"
  chmod +x install.sh && sudo ./install.sh
  echo -e "${GREEN}✅ GRUB theme installed.${NC}"
}

update_system() {
  echo -e "\n${BLUE}󰚰 Updating system...${NC}"
  sudo pacman -Syu --noconfirm
  echo -e "${GREEN}✅ System updated.${NC}"
}

# ──────────────────────────────────────────────
# 🧠 MAIN MENU
# ──────────────────────────────────────────────
echo -e "${BLUE}󱓧 Welcome $USER — Arch+DWM Modular Setup${NC}"
echo "Select an installation mode:"
echo "1) Full Installation"
echo "2) Minimal (Base + Configs)"
echo "3) Update System Only"
echo "4) Config-Only Setup"
echo "5) Exit"
read -rp "Enter choice [1-5]: " mode

case "$mode" in
  1)
    echo -e "${GREEN}▶ Running Full Installation...${NC}"
    enable_sudo_wheel
    install_security
    update_grub
    install_yay
    clone_repo
    install_configs
    build_dwm_suite
    install_pacman_pkgs
    install_aur_pkgs
    install_grub_theme
    ;;
  2)
    echo -e "${GREEN}▶ Running Minimal Installation...${NC}"
    enable_sudo_wheel
    install_security
    install_yay
    clone_repo
    install_configs
    build_dwm_suite
    ;;
  3)
    echo -e "${GREEN}▶ Updating System...${NC}"
    update_system
    ;;
  4)
    echo -e "${GREEN}▶ Installing Configs Only...${NC}"
    clone_repo
    install_configs
    ;;
  5)
    echo -e "${YELLOW}❌ Cancelled by user.${NC}"
    exit 0
    ;;
  *)
    echo -e "${RED}⚠️ Invalid choice. Exiting.${NC}"
    exit 1
    ;;
esac

# ──────────────────────────────────────────────
# ✅ DONE
# ──────────────────────────────────────────────
echo -e "\n${GREEN}✅ Installation Complete! Backup repo is located at ~/backup${NC}"
